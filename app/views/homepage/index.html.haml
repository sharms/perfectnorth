%h1 The Perfectnorth.com API
%p 
  This webservice provides simple to use methods to retrieve data on
  = link_to "Perfectnorth.com", "http://www.perfectnorth.com"
  in neat json format.  The feed parser is nokogiri, and leverages xpath 
  selectors and regex to gather the data, as the website itself is not laid out
  symantically.  There are no ID or class elements to realistically key off of,
  but instead just common string formats to regex out and table positions.

.live
  %table
    %caption What's Perfect North like Today?
    %thead
      %tr
        %th Field
        %th Contents
    %tbody
      %tr
        %td description
        %td#description Loading
      %tr
        %td snow_base
        %td#snow_base Loading
      %tr
        %td tows_open
        %td#tows_open Loading
      %tr
        %td tows_total
        %td#tows_total Loading
      %tr
        %td trails_open
        %td#trails_open Loading
      %tr
        %td trails_total
        %td#trails_total Loading
      %tr
        %td tubing_lanes_open
        %td#tubing_lanes_open Loading
      %tr
        %td vertical_drop
        %td#vertical_drop Loading
      %tr
        %td new_snow_last_7
        %td#new_snow_last_7 Loading
      %tr
        %td created_at
        %td#created_at Loading
      %tr
        %td updated_at
        %td#updated_at Loading

%h2 How Do I Use It?
%ul
  %li 
    %h3 Retrieve General Information
    %p 
      %pre.code curl http://perfectnorth-snowfoundry.rhcloud.com/general.json
  %li
    %h3 Retrieve All Ski Slopes
    %p 
      %pre.code curl http://perfectnorth-snowfoundry.rhcloud.com/slopes.json
  %li
    %h3 Retrieve All Tubing Carpets
    %p 
      %pre.code curl http://perfectnorth-snowfoundry.rhcloud.com/tubing_carpets.json
  %li
    %h3 Retrieve All News
    %p 
      %pre.code curl http://perfectnorth-snowfoundry.rhcloud.com/news.json

%h2 Questions
%ul
  %li
    %h3 Why isn't this hosted on Heroku?
    %p 
      Openshift.com provided everything I needed for the project, and included
      more equivalent dynos.  Could easily move to Heroku however, it is just
      a git repo with rails and a cronjob.
  %li
    %h3 How do I get a specific item?
    %p 
      All items are cached in a MySQL backend, so for the current day you
      can take the
      %strong id
      element of your result and append it to the end of the url:
      %pre.code curl http://perfectnorth-snowfoundry.rhcloud.com/slopes/5.json

  %li
    %h3 Historical Results
    %p 
      This server stores results indefinitely, however the general, slopes, news
      and tubing_carpets calls will only return items since the start of the
      day today.  An optional date field could be added to each allowing historical
      traversal.
  %li
    %h3 Created_at Times
    %p
      All created_at fields describe the time in which the data was scraped,
      as the data itself does not have timestamps.
